import Stripe from "stripe";
import { headers } from "next/headers";
import { NextResponse } from "next/server";
import { stripe } from "@/lib/stripe";
import { db } from "@/lib/db";

export async function POST(req: Request) {
    // V√©rifier que la cl√© secr√®te du webhook est configur√©e
    const webhookSecret = process.env.STRIPE_WEBHOOK_SECRET;
    if (!webhookSecret) {
        console.log("‚ùå STRIPE_WEBHOOK_SECRET n'est pas configur√©");
        return new NextResponse("Configuration du webhook manquante", {
            status: 500,
        });
    }

    const body = await req.text();
    const headersList = await headers();
    const signature = headersList.get("Stripe-Signature") as string;

    // V√©rifier que la signature est pr√©sente
    if (!signature) {
        console.log("‚ùå Signature Stripe manquante");
        return new NextResponse("Signature manquante", { status: 400 });
    }

    let event: Stripe.Event;

    try {
        // Construire l'√©v√©nement Stripe avec v√©rification de signature
        event = stripe.webhooks.constructEvent(body, signature, webhookSecret);
        console.log("‚úÖ √âv√©nement Stripe v√©rifi√©:", event.type);
    } catch (err) {
        console.log(`‚ùå Erreur de v√©rification du webhook: ${err}`);
        return new NextResponse(`Erreur de webhook: ${err}`, { status: 400 });
    }
    // Traiter uniquement les √©v√©nements de session de checkout
    if (event.type === "checkout.session.completed") {
        const session = event.data.object as Stripe.Checkout.Session;
        const userId = session.metadata?.userId;
        const courseId = session.metadata?.courseId;

        console.log("üîÑ Traitement de checkout.session.completed");
        console.log("üìã M√©tadonn√©es:", { userId, courseId });

        if (!userId || !courseId) {
            console.log("‚ùå M√©tadonn√©es manquantes dans la session");
            return new NextResponse("M√©tadonn√©es manquantes", { status: 400 });
        }

        try {
            // V√©rifier si l'achat existe d√©j√† pour √©viter les doublons
            const existingPurchase = await db.purchase.findUnique({
                where: {
                    userId_courseId: {
                        userId: userId,
                        courseId: courseId,
                    },
                },
            });

            if (existingPurchase) {
                console.log("‚ö†Ô∏è Achat d√©j√† existant, ignor√©");
                return new NextResponse("Achat d√©j√† trait√©", { status: 200 });
            }

            // Cr√©er l'achat dans la base de donn√©es
            await db.purchase.create({
                data: {
                    userId: userId,
                    courseId: courseId,
                },
            });

            console.log("‚úÖ Achat cr√©√© avec succ√®s");
        } catch (error) {
            console.log("‚ùå Erreur lors de la cr√©ation de l'achat:", error);
            return new NextResponse("Erreur de base de donn√©es", {
                status: 500,
            });
        }
    } else {
        console.log(`‚ÑπÔ∏è Type d'√©v√©nement non trait√©: ${event.type}`);
        return new NextResponse(`Type d'√©v√©nement non trait√©: ${event.type}`, {
            status: 200,
        });
    }

    return new NextResponse("Webhook trait√© avec succ√®s", { status: 200 });
}
