const { Client } = require("pg");
require("dotenv").config();

async function diagnoseConnection() {
    console.log("üîç Diagnostic de la connexion √† la base de donn√©es");
    console.log("=".repeat(50));

    // Afficher l'URL de connexion (masqu√©e pour la s√©curit√©)
    const dbUrl = process.env.DATABASE_URL;
    if (dbUrl) {
        const maskedUrl = dbUrl.replace(/:([^:@]+)@/, ":****@");
        console.log("üìç URL de connexion:", maskedUrl);
    } else {
        console.log("‚ùå Aucune DATABASE_URL trouv√©e dans .env");
        return;
    }

    // Extraire les informations de connexion
    try {
        const url = new URL(dbUrl);
        console.log("üè† Host:", url.hostname);
        console.log("üîå Port:", url.port || "5432");
        console.log("üóÑÔ∏è  Database:", url.pathname.slice(1));
        console.log("üë§ User:", url.username);
        console.log(
            "üîê SSL Mode:",
            url.searchParams.get("sslmode") || "non sp√©cifi√©"
        );
    } catch (error) {
        console.log("‚ùå Erreur lors du parsing de l'URL:", error.message);
        return;
    }

    console.log("\nüîÑ Test de connexion...");

    const client = new Client({
        connectionString: dbUrl,
        connectionTimeoutMillis: 10000, // 10 secondes
    });

    try {
        console.log("‚è≥ Connexion en cours...");
        await client.connect();
        console.log("‚úÖ Connexion r√©ussie !");

        // Test de requ√™te simple
        const result = await client.query(
            "SELECT version(), now() as current_time"
        );
        console.log(
            "üéØ Version PostgreSQL:",
            result.rows[0].version.split(" ")[0] +
                " " +
                result.rows[0].version.split(" ")[1]
        );
        console.log("‚è∞ Heure du serveur:", result.rows[0].current_time);

        // Test de cr√©ation de table (pour v√©rifier les permissions)
        try {
            await client.query(
                "CREATE TABLE IF NOT EXISTS test_connection (id SERIAL PRIMARY KEY, created_at TIMESTAMP DEFAULT NOW())"
            );
            await client.query("DROP TABLE test_connection");
            console.log("‚úÖ Permissions de cr√©ation/suppression: OK");
        } catch (permError) {
            console.log("‚ö†Ô∏è  Permissions limit√©es:", permError.message);
        }
    } catch (error) {
        console.log("‚ùå Erreur de connexion:", error.message);
        console.log("üîç Code d'erreur:", error.code);

        // Suggestions bas√©es sur le type d'erreur
        if (error.code === "ECONNRESET") {
            console.log("\nüí° Suggestions pour ECONNRESET:");
            console.log("   - La base de donn√©es Neon est peut-√™tre en veille");
            console.log("   - V√©rifiez votre tableau de bord Neon");
            console.log("   - Essayez de r√©activer la base de donn√©es");
            console.log("   - V√©rifiez vos credentials");
        } else if (error.code === "ENOTFOUND") {
            console.log("\nüí° Suggestions pour ENOTFOUND:");
            console.log("   - V√©rifiez l'URL du serveur");
            console.log("   - Probl√®me de r√©seau ou DNS");
        } else if (error.code === "ECONNREFUSED") {
            console.log("\nüí° Suggestions pour ECONNREFUSED:");
            console.log("   - Le serveur refuse la connexion");
            console.log("   - V√©rifiez le port et l'adresse");
        }
    } finally {
        try {
            await client.end();
        } catch (e) {
            // Ignore les erreurs de fermeture
        }
    }
}

diagnoseConnection();
