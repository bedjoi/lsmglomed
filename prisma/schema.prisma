// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Course {
  id          String        @id @default(uuid())
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  isPublished Boolean       @default(false)
  imageUrl    String?       @db.Text
  title       String        @db.Text
  userId      String
  description String?       @db.Text
  price       Float         @default(0)
  categoryId  String?
  category    Category?     @relation(fields: [categoryId], references: [id])
  attachments Attachment[]

  @@index([categoryId])
}

model Category {
  id      String   @id @default(uuid())
  name    String   @unique
  courses Course[]
}

model Attachment {
  id        String   @id @default(uuid())
  name      String
  url       String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@index([courseId])
}

//..........................................................

// Uncomment the following lines to use MongoDB

// datasource db {
//   provider     = "mongodb"
//   url          = env("DATABASE_URL")
//   relationMode = "prisma"
// }

// generator client {
//   provider = "prisma-client-js"
//   output   = "../lib/generated/prisma"
// }

// model User {
//   id        String   @id @default(auto()) @map("_id") @db.ObjectId
//   createdAt DateTime @default(now())
//   email     String   @unique
//   name      String?
//   role      Role     @default(USER)
//   courses   Course[]
// }

// model Course {
//   id          String        @id @default(auto()) @map("_id") @db.ObjectId
//   title       String
//   userId      String        @db.ObjectId
//   // autres champs...
//   createdAt   DateTime      @default(now())
//   updatedAt   DateTime      @updatedAt
//   imageUrl    String?
//   description String?
//   price       Float?        @default(0)
//   isPublished Boolean       @default(false)
//   category    Category?     @relation(fields: [categoryId], references: [id])
//   categoryId  String?       @db.ObjectId
//   attachments Attachment[]
//   User        User          @relation(fields: [userId], references: [id])

//   @@map("courses") // optionnel : nom de la collection MongoDB
// }

// model Attachment {
//   id        String   @id @default(auto()) @map("_id") @db.ObjectId
//   name      String
//   url       String
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
//   courseId  String   @db.ObjectId
// }

// model Category {
//   id      String   @id @default(auto()) @map("_id") @db.ObjectId
//   name    String   @unique
//   courses Course[]
// }

// enum Role {
//   USER
//   ADMIN
// }
